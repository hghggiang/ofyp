{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red255\green255\blue255;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c13333\c13333\c13333;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww28300\viewh17700\viewkind0
\deftab720
\pard\pardeftab720\sl220\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The building file contains all the building in SF area. Each row of building csv file is a building with four minimum rectangle vertices. 'height' is the original height of the individual building and 'z' is the height of the cluster the building belonging to, where 'z' is also the maximum height of the buildings in the cluster.\'a0\cb1 \
\cb3 Run this code to get the building vertices at each altitude:\cb1 \
\cb3 buildings_altitude_i=data[data['height']>=i]\cb1 \
\cb3 You can either use clustered data or original data. We can compare either one with fast marching.\cb1 \
\cb3 If you want to compare with clustered result, use 'z' instead of 'height' for building height and following 20 altitudes:\cb1 \
\pard\pardeftab720\sl320\partightenfactor0
\cf4 \cb3 \strokec4 [  28.2 ,   31.34,   32.36,   37.5 ,   39.01,   39.1 ,   43.15,   43.56,   46.64,   49.02,   59.66,   77.38,   89.69,   90.93,   111.31,  119.74,  127.78,  162.76,  179.05,  258.49]\cb1 \
\pard\pardeftab720\sl220\partightenfactor0
\cf2 \cb3 \strokec2 If you want to compare with non clustered result, where we use original buildings as obstacles, use 'height' instead of 'z', and following 20 altitudes:\
\pard\pardeftab720\sl320\partightenfactor0
\cf4 \strokec4 [   8.79,   11.76,   13.1 ,   13.95,   15.7 ,   17.55,   19.28,    21.61,   23.94,   26.82,   30.08,   33.05,   38.14,   43.78,   51.78,   65.71,   82.59,  100.92,  132.51,  258.49]\cb1 \
}